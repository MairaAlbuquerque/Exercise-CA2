class Products:
    def __init__(self, description, seller, price, curr):
        self.description = description
        self.seller = seller
        self.price = price
        self.curr = curr
            
        
prices = {1:"EUR", 1.23:"USD", 1.56:"CAD"}

class Basket:
    def __init__(self):
        self.__shoppingBasket = {}
        
    def add_item(self, sku, qty):
        self.__shoppingBasket[sku]=self.getBalance_items(sku)+qty
        print(self.__shoppingBasket)
        
    def remove_item(self, sku, qty):
        try:
            self.__shoppingBasket[sku]=self.getBalance_items(sku)-qty
        except KeyError:
            print("Key Not Found")
        
    def getBalance_items(self, sku):
        if sku not in self.__shoppingBasket:
            return 0
        return self.__shoppingBasket[sku]
    
    def getValue(self, sku, products):    #not multiplies by prices(rates) yet
        if sku not in self.__shoppingBasket:
            return 0
        
        for product in products:
            if product.description == sku:
                return self.__shoppingBasket[sku]*product.price
        

---------------------------------------------------------------------------------------------------------------------------------------
#Testing:
       
product1=Product("suitcase","Arnotts",23,"EUR")
product2=Product("pillows","Arnotts",34,"EUR")
product3=Product("duvet", "Dunnes", 30, "EUR")
product4=Product("coverduvet", "Amazon", 20, "USD")

products=[product1, product2, product3, product4]

for sku in products:
    print(sku.description +", " + sku.seller + ", " + str(sku.price) + ", " + sku.curr )
        
MyCase= Basket()
MyCase.add_item("suitcase", 1)
MyCase.add_item("pillows", 2)
MyCase.add_item("duvet", 1)

print(MyCase.getBalance_items("suitcase"))

print(MyCase.getValue("suitcase", products))
print(MyCase.getValue("pillows", products))
